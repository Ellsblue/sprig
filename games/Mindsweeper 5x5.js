/*
@title: Mindsweeper 5 x 5
@author: Elliott Balcom
@tags: [Minesweeper]
@img: ""
@addedOn: 2024-00-00
*/

const background = "b"
const spike = "m"
const flag = "f"
const cursor = "c"

const zero = "0"
const one = "1"
const two = "2"
const three = "3"
const four = "4"
const five = "5"
const six = "6"
const seven = "7"
const eight = "8"

const you1 = "y"
const you2 = "o"
const you3 = "u"
const lose1 = "l"
const lose2 = "s"
const lose3 = "e"
const lose4 = "q"
const red = "r"

setLegend(
  [ background, bitmap`
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
LLLLLLLLLLLLLLL0
0000000000000000` ],
  [ spike, bitmap`
................
................
.......0........
...0.00000.0....
....0000000.....
...000323000....
...003233300....
..00023333000...
...003333200....
...000332000....
....0000000.....
...0.00000.0....
.......0........
................
................
................` ],
  [ flag, bitmap`
................
...333300.......
...333300.......
...333300.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
.......00.......
....00000000....
....00000000....
................
................` ],
  [ cursor, bitmap`
222.........222.
2.............2.
2.............2.
................
................
................
................
................
................
................
................
................
2.............2.
2.............2.
222.........222.
................` ],
  [ red, bitmap`
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333
3333333333333333` ],
  [ you1, bitmap`
3333333333333333
3333333333333333
3300333333330033
3300033333300033
3330003333000333
3333000330003333
3333300000033333
3333330000333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333333333333` ],
  [ you2, bitmap`
3333333333333333
3333300000033333
3333000000003333
3330003333000333
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3330003333000333
3333000000003333
3333300000033333
3333333333333333` ],
  [ you3, bitmap`
3333333333333333
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3300033333300033
3330003333000333
3333000000003333
3333300000033333
3333333333333333` ],
  [ lose1, bitmap`
3333333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300000000000033
3300000000000033
3333333333333333` ],
  [ lose2, bitmap`
3333000000003333
3330000000000333
3300033333300033
3300333333330033
3300333333333333
3300333333333333
3300033333333333
3330000000003333
3333000000000333
3333333333300033
3333333333330033
3333333333330033
3300333333330033
3300033333300033
3330000000000333
3333000000003333` ],
  [ lose3, bitmap`
3333333333333333
3300000000000033
3300000000000033
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300000000333333
3300000000333333
3300333333333333
3300333333333333
3300333333333333
3300333333333333
3300000000000033
3300000000000033
3333333333333333` ],
  [ lose4, bitmap`
3333333333333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333003333333
3333333333333333
3333333333333333
3333333003333333
3333333003333333
3333333333333333` ],
  [ zero, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111110001111110
1111101110111110
1111101110111110
1111101110111110
1111101110111110
1111101110111110
1111110001111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ one, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111111511111110
1111115511111110
1111151511111110
1111111511111110
1111111511111110
1111111511111110
1111155555111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ two, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111177777111110
1111171117111110
1111111117111110
1111177777111110
1111171111111110
1111171117111110
1111177777111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ three, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111144444111110
1111111114111110
1111111114111110
1111114444111110
1111111114111110
1111111114111110
1111144444111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ four, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111141114111110
1111141114111110
1111141114111110
1111144444111110
1111111114111110
1111111114111110
1111111114111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ five, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111199999111110
1111191111111110
1111191111111110
1111199999111110
1111111119111110
1111111119111110
1111199999111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ six, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111166666111110
1111161116111110
1111161111111110
1111166666111110
1111161116111110
1111161116111110
1111166666111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ seven, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
1111133333111110
1111131113111110
1111111113111110
1111111113111110
1111111113111110
1111111113111110
1111111113111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
  [ eight, bitmap`
1111111111111110
1111111111111110
1111111111111110
1111111111111110
11111CCCCC111110
11111C111C111110
11111C111C111110
11111CCCCC111110
11111C111C111110
11111C111C111110
11111CCCCC111110
1111111111111110
1111111111111110
1111111111111110
1111111111111110
0000000000000000` ],
)

setSolids([cursor])



let level = 0
const levels = [
  map`
.....
.....
..c..
.....
.....`,
  map`
rrrrr
ryour
rrrrr
loseq
rrrrr`
]

setMap(levels[level])
setBackground(background)

setPushables({ 
  [cursor]: []
})

var key = []
var rand1 = getRandomIntInclusive(8, 40)
  while(rand1 == 13 || rand1 == 14 || rand1 == 20 || rand1 == 21 || rand1 == 27 || rand1 == 28 || rand1 == 34 || rand1 == 35){
    rand1 = getRandomIntInclusive(8, 40)
  }
  var rand2 = getRandomIntInclusive(8, 40)
  while(rand2 == 13 || rand2 == 14 || rand2 == 20 || rand2 == 21 || rand2 == 27 || rand2 == 28 || rand2 == 34 || rand2 == 35 || rand2 == rand1){
    rand2 = getRandomIntInclusive(8, 40)
  }
  var rand3 = getRandomIntInclusive(8, 40)
  while(rand3 == 13 || rand3 == 14 || rand3 == 20 || rand3 == 21 || rand3 == 27 || rand3 == 28 || rand3 == 34 || rand3 == 35 || rand3 == rand1 || rand3 == rand2){
    rand3 = getRandomIntInclusive(8, 40)
  }
  for(var i = 0; i < 49; i++) {
    if(i == rand1 || i == rand2 || i == rand3){
      key[key.length] = 1
    } else {
      key[key.length] = 0
    }
  }

onInput("s", () => {
  getFirst(cursor).y += 1
})

onInput("w", () => {
  getFirst(cursor).y -= 1
})

onInput("a", () => {
  getFirst(cursor).x -= 1
})

onInput("d", () => {
  getFirst(cursor).x += 1
})

onInput("k", () => {
  addSprite(getFirst(cursor).x, getFirst(cursor).y, flag)
})

onInput("l", () => {
  var location = (getFirst(cursor).x+1) + ((getFirst(cursor).y+1)*7)
  var subtotal = key[(location-8)] + key[(location-7)] + key[(location-6)] + key[(location-1)] + key[(location+1)] + key[(location+6)] + key[(location+7)] + key[(location+8)]
  
  if(key[location] == 1){
    setMap(levels[1])
  } else if(subtotal == 0){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, zero)
  } else if(subtotal == 1){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, one)
  } else if(subtotal == 2){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, two)
  } else if(subtotal == 3){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, three)
  } else if(subtotal == 4){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, four)
  } else if(subtotal == 5){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, five)
  } else if(subtotal == 6){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, six)
  } else if(subtotal == 7){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, seven)
  } else if(subtotal == 8){
    addSprite(getFirst(cursor).x, getFirst(cursor).y, eight)
  }
})

onInput("i", () => {
  var x = getFirst(cursor).x
  var y = getFirst(cursor).y
  clearTile(x, y)
  addSprite(x, y, cursor)
})

onInput("j", () => {
  setMap(levels[0])
  key = []
  var rand1 = getRandomIntInclusive(8, 40)
  while(rand1 == 13 || rand1 == 14 || rand1 == 20 || rand1 == 21 || rand1 == 27 || rand1 == 28 || rand1 == 34 || rand1 == 35){
    rand1 = getRandomIntInclusive(8, 40)
  }
  var rand2 = getRandomIntInclusive(8, 40)
  while(rand2 == 13 || rand2 == 14 || rand2 == 20 || rand2 == 21 || rand2 == 27 || rand2 == 28 || rand2 == 34 || rand2 == 35){
    rand2 = getRandomIntInclusive(8, 40)
  }
  var rand3 = getRandomIntInclusive(8, 40)
  while(rand3 == 13 || rand3 == 14 || rand3 == 20 || rand3 == 21 || rand3 == 27 || rand3 == 28 || rand3 == 34 || rand3 == 35){
    rand3 = getRandomIntInclusive(8, 40)
  }

  for(var i = 0; i < 49; i++) {
    if(i == rand1 || i == rand2 || i == rand3){
      key[key.length] = 1
    } else {
      key[key.length] = 0
    }
  }

  for(i = 0; i < 5; i ++) {
    clearTile(i, 0);
    clearTile(i, 1);
    clearTile(i, 2);
    clearTile(i, 3);
    clearTile(i, 4);
  }

  addSprite(2, 2, cursor)
})
        
  afterInput(() => {
  
})

function getRandomIntInclusive(min, max) {
  const minCeiled = Math.ceil(min);
  const maxFloored = Math.floor(max);
  return Math.floor(Math.random() * (maxFloored - minCeiled + 1) + minCeiled);}